# Script PowerShell para diagnosticar e resolver problemas com Git/Vercel
Write-Host "==========================================" -ForegroundColor Cyan
Write-Host "   Diagn√≥stico e Solu√ß√£o Git/Vercel" -ForegroundColor Cyan
Write-Host "==========================================" -ForegroundColor Cyan
Write-Host ""

# Navegar para o diret√≥rio do projeto
Set-Location "F:\site-ia\ai-video-hub"
Write-Host "üìÅ Diret√≥rio: $(Get-Location)" -ForegroundColor Yellow
Write-Host ""

# Verificar se Git est√° instalado
try {
    $gitVersion = git --version
    Write-Host "‚úÖ Git instalado: $gitVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Git n√£o est√° instalado ou n√£o est√° no PATH" -ForegroundColor Red
    exit 1
}
Write-Host ""

# Verificar configura√ß√£o do usu√°rio Git
Write-Host "üë§ Configura√ß√£o do usu√°rio Git:" -ForegroundColor Yellow
$gitName = git config user.name
$gitEmail = git config user.email

if ([string]::IsNullOrWhiteSpace($gitName)) {
    Write-Host "‚ö†Ô∏è  Nome n√£o configurado. Configurando..." -ForegroundColor Yellow
    git config user.name "Seu Nome"
    Write-Host "   Use: git config user.name 'Seu Nome Real'" -ForegroundColor Cyan
} else {
    Write-Host "   Nome: $gitName" -ForegroundColor Green
}

if ([string]::IsNullOrWhiteSpace($gitEmail)) {
    Write-Host "‚ö†Ô∏è  Email n√£o configurado. Configurando..." -ForegroundColor Yellow
    git config user.email "seu-email@example.com"
    Write-Host "   Use: git config user.email 'seu-email-real@example.com'" -ForegroundColor Cyan
} else {
    Write-Host "   Email: $gitEmail" -ForegroundColor Green
}
Write-Host ""

# Status do reposit√≥rio
Write-Host "üìä Status do reposit√≥rio:" -ForegroundColor Yellow
git status
Write-Host ""

# Verificar branch atual
$currentBranch = git branch --show-current
Write-Host "üåø Branch atual: $currentBranch" -ForegroundColor Yellow
Write-Host ""

# Verificar remotes
Write-Host "üîó Remotes configurados:" -ForegroundColor Yellow
git remote -v
Write-Host ""

# Adicionar arquivos
Write-Host "‚ûï Adicionando arquivos..." -ForegroundColor Yellow
git add .
$addStatus = $LASTEXITCODE
if ($addStatus -eq 0) {
    Write-Host "‚úÖ Arquivos adicionados com sucesso" -ForegroundColor Green
} else {
    Write-Host "‚ùå Erro ao adicionar arquivos" -ForegroundColor Red
}
Write-Host ""

# Verificar se h√° mudan√ßas para commit
$changes = git status --porcelain
if ([string]::IsNullOrWhiteSpace($changes)) {
    Write-Host "‚ö†Ô∏è  N√£o h√° mudan√ßas para commit" -ForegroundColor Yellow
    Write-Host "   Op√ß√µes:" -ForegroundColor Cyan
    Write-Host "   1. Fa√ßa alguma altera√ß√£o no c√≥digo" -ForegroundColor White
    Write-Host "   2. Use: git commit --allow-empty -m 'Deploy para Vercel'" -ForegroundColor White
} else {
    Write-Host "üìù Mudan√ßas detectadas. Tentando commit..." -ForegroundColor Yellow
    git commit -m "Update: deploy para Vercel $(Get-Date -Format 'yyyy-MM-dd HH:mm')"
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Commit realizado com sucesso!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erro ao fazer commit" -ForegroundColor Red
    }
}
Write-Host ""

# Verificar arquivos grandes
Write-Host "üì¶ Verificando arquivos grandes (>10MB):" -ForegroundColor Yellow
$largeFiles = @()
git ls-files | ForEach-Object {
    if (Test-Path $_) {
        $size = (Get-Item $_).Length / 1MB
        if ($size -gt 10) {
            $largeFiles += [PSCustomObject]@{
                File = $_
                SizeMB = [math]::Round($size, 2)
            }
        }
    }
}

if ($largeFiles.Count -gt 0) {
    Write-Host "‚ö†Ô∏è  Arquivos grandes encontrados:" -ForegroundColor Yellow
    $largeFiles | Format-Table -AutoSize
    Write-Host "   Considere adicionar ao .gitignore ou usar Git LFS" -ForegroundColor Cyan
} else {
    Write-Host "‚úÖ Nenhum arquivo grande encontrado" -ForegroundColor Green
}
Write-Host ""

# Verificar configura√ß√£o Vercel
Write-Host "üöÄ Verificando configura√ß√£o Vercel:" -ForegroundColor Yellow
if (Test-Path ".vercel\project.json") {
    Write-Host "‚úÖ Projeto Vercel configurado" -ForegroundColor Green
    $vercelConfig = Get-Content ".vercel\project.json" | ConvertFrom-Json
    Write-Host "   Project ID: $($vercelConfig.projectId)" -ForegroundColor White
    Write-Host "   Org ID: $($vercelConfig.orgId)" -ForegroundColor White
} else {
    Write-Host "‚ö†Ô∏è  Projeto Vercel n√£o configurado localmente" -ForegroundColor Yellow
    Write-Host "   Execute: vercel" -ForegroundColor Cyan
}
Write-Host ""

# Comandos √∫teis
Write-Host "==========================================" -ForegroundColor Cyan
Write-Host "   Comandos √öteis" -ForegroundColor Cyan
Write-Host "==========================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "üîß Para configurar Git:" -ForegroundColor Yellow
Write-Host "   git config user.name 'Seu Nome'" -ForegroundColor White
Write-Host "   git config user.email 'seu-email@example.com'" -ForegroundColor White
Write-Host ""
Write-Host "üì§ Para fazer push:" -ForegroundColor Yellow
Write-Host "   git push origin $currentBranch" -ForegroundColor White
Write-Host ""
Write-Host "üöÄ Para deploy no Vercel:" -ForegroundColor Yellow
Write-Host "   vercel --prod" -ForegroundColor White
Write-Host "   vercel --force" -ForegroundColor White
Write-Host ""
Write-Host "üîÑ Para sincronizar com Vercel:" -ForegroundColor Yellow
Write-Host "   git pull origin $currentBranch" -ForegroundColor White
Write-Host "   git push origin $currentBranch" -ForegroundColor White
Write-Host ""

# Aguardar entrada do usu√°rio
Write-Host "Pressione qualquer tecla para continuar..." -ForegroundColor Gray
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
