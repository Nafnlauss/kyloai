#!/usr/bin/env node

/**
 * Script de Acesso R√°pido ao Admin Dashboard
 * Uso: node scripts/admin-quick-access.js
 */

const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');
const prisma = new PrismaClient();

const ADMIN_EMAIL = 'admin@example.com';
const ADMIN_PASSWORD = 'Admin@123456'; // Senha padr√£o segura

async function setupAdminAccess() {
  console.log('\nüõ°Ô∏è  CONFIGURANDO ACESSO ADMIN...\n');

  try {
    // 1. Verificar se o usu√°rio admin existe
    let adminUser = await prisma.user.findUnique({
      where: { email: ADMIN_EMAIL }
    });

    if (adminUser) {
      console.log('‚úÖ Usu√°rio admin j√° existe');
      
      // Atualizar para garantir que √© admin
      if (adminUser.role !== 'ADMIN') {
        await prisma.user.update({
          where: { email: ADMIN_EMAIL },
          data: { role: 'ADMIN' }
        });
        console.log('‚úÖ Role atualizada para ADMIN');
      }

      // Atualizar senha se necess√°rio
      if (!adminUser.passwordHash) {
        const hashedPassword = await bcrypt.hash(ADMIN_PASSWORD, 10);
        await prisma.user.update({
          where: { email: ADMIN_EMAIL },
          data: { passwordHash: hashedPassword }
        });
        console.log('‚úÖ Senha configurada');
      }
    } else {
      // Criar novo usu√°rio admin
      console.log('üìù Criando novo usu√°rio admin...');
      
      const hashedPassword = await bcrypt.hash(ADMIN_PASSWORD, 10);
      adminUser = await prisma.user.create({
        data: {
          email: ADMIN_EMAIL,
          name: 'Admin User',
          passwordHash: hashedPassword,
          role: 'ADMIN',
          credits: 9999,
          emailVerified: new Date(),
          isActive: true
        }
      });
      
      console.log('‚úÖ Usu√°rio admin criado com sucesso!');
    }

    // 2. Mostrar informa√ß√µes de acesso
    console.log('\n' + '='.repeat(50));
    console.log('üéØ ACESSO AO DASHBOARD ADMINISTRATIVO');
    console.log('='.repeat(50));
    console.log('\nüìç URLs de Acesso:');
    console.log('   Local: http://localhost:3000/admin/overview');
    console.log('   Produ√ß√£o: https://kylo.video/admin/overview');
    
    console.log('\nüîë Credenciais:');
    console.log(`   Email: ${ADMIN_EMAIL}`);
    console.log(`   Senha: ${ADMIN_PASSWORD}`);
    
    console.log('\nüìä Funcionalidades Dispon√≠veis:');
    console.log('   ‚úì Dashboard com m√©tricas e KPIs');
    console.log('   ‚úì Gest√£o completa de usu√°rios');
    console.log('   ‚úì Hist√≥rico de transa√ß√µes');
    console.log('   ‚úì Monitoramento de APIs');
    console.log('   ‚úì Sistema de alertas');
    console.log('   ‚úì Logs de auditoria');
    
    console.log('\n‚ö†Ô∏è  Notas Importantes:');
    console.log('   - Modo Demo est√° ATIVO (read-only)');
    console.log('   - Para modo produ√ß√£o, remova NEXT_PUBLIC_DEMO_MODE');
    console.log('   - Todas as a√ß√µes s√£o registradas no audit log');
    
    console.log('\nüöÄ Para iniciar o servidor:');
    console.log('   cd ai-video-hub && pnpm dev');
    console.log('\n' + '='.repeat(50) + '\n');

    // 3. Verificar outras configura√ß√µes
    const totalUsers = await prisma.user.count();
    const totalAdmins = await prisma.user.count({ where: { role: 'ADMIN' }});
    
    console.log('üìà Estat√≠sticas do Sistema:');
    console.log(`   - Total de usu√°rios: ${totalUsers}`);
    console.log(`   - Total de admins: ${totalAdmins}`);
    
    // 4. Listar todos os admins
    if (totalAdmins > 0) {
      const admins = await prisma.user.findMany({
        where: { role: 'ADMIN' },
        select: { email: true, name: true, credits: true }
      });
      
      console.log('\nüë• Admins no sistema:');
      admins.forEach(admin => {
        console.log(`   - ${admin.email} (${admin.name || 'Sem nome'}) - ${admin.credits} cr√©ditos`);
      });
    }

  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar
setupAdminAccess();